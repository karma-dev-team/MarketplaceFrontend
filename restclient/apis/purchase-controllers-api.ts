/* tslint:disable */
/* eslint-disable */
/**
 * KarmaMarketplace
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ConfirmPurchaseDto } from '../models';
import { CreatePurchaseDto } from '../models';
import { PurchaseEntity } from '../models';
import { UpdatePurchaseDto } from '../models';
/**
 * PurchaseControllersApi - axios parameter creator
 * @export
 */
export const PurchaseControllersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [status] 
         * @param {string} [direction] 
         * @param {string} [operation] 
         * @param {string} [transactionSatus] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {string} [userId] 
         * @param {number} [start] 
         * @param {number} [ends] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPurchaseMeGet: async (status?: string, direction?: string, operation?: string, transactionSatus?: string, startTime?: Date, endTime?: Date, userId?: string, start?: number, ends?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/purchase/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (direction !== undefined) {
                localVarQueryParameter['Direction'] = direction;
            }

            if (operation !== undefined) {
                localVarQueryParameter['Operation'] = operation;
            }

            if (transactionSatus !== undefined) {
                localVarQueryParameter['TransactionSatus'] = transactionSatus;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['StartTime'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['EndTime'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (start !== undefined) {
                localVarQueryParameter['Start'] = start;
            }

            if (ends !== undefined) {
                localVarQueryParameter['Ends'] = ends;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productId 
         * @param {CreatePurchaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPurchaseProductProductIdBuyPost: async (productId: string, body?: CreatePurchaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling apiPurchaseProductProductIdBuyPost.');
            }
            const localVarPath = `/api/purchase/product/{productId}/buy`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {ConfirmPurchaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPurchasePurchaseIdConfirmPost: async (purchaseId: string, body?: ConfirmPurchaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseId' is not null or undefined
            if (purchaseId === null || purchaseId === undefined) {
                throw new RequiredError('purchaseId','Required parameter purchaseId was null or undefined when calling apiPurchasePurchaseIdConfirmPost.');
            }
            const localVarPath = `/api/purchase/{purchaseId}/confirm`
                .replace(`{${"purchaseId"}}`, encodeURIComponent(String(purchaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {UpdatePurchaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPurchasePurchaseIdPatch: async (purchaseId: string, body?: UpdatePurchaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseId' is not null or undefined
            if (purchaseId === null || purchaseId === undefined) {
                throw new RequiredError('purchaseId','Required parameter purchaseId was null or undefined when calling apiPurchasePurchaseIdPatch.');
            }
            const localVarPath = `/api/purchase/{purchaseId}`
                .replace(`{${"purchaseId"}}`, encodeURIComponent(String(purchaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tempUserId 
         * @param {string} [status] 
         * @param {string} [direction] 
         * @param {string} [operation] 
         * @param {string} [transactionSatus] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {string} [userId] 
         * @param {number} [start] 
         * @param {number} [ends] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPurchaseUserTempUserIdGet: async (tempUserId: string, status?: string, direction?: string, operation?: string, transactionSatus?: string, startTime?: Date, endTime?: Date, userId?: string, start?: number, ends?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tempUserId' is not null or undefined
            if (tempUserId === null || tempUserId === undefined) {
                throw new RequiredError('tempUserId','Required parameter tempUserId was null or undefined when calling apiPurchaseUserTempUserIdGet.');
            }
            const localVarPath = `/api/purchase/user/{tempUserId}`
                .replace(`{${"tempUserId"}}`, encodeURIComponent(String(tempUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (direction !== undefined) {
                localVarQueryParameter['Direction'] = direction;
            }

            if (operation !== undefined) {
                localVarQueryParameter['Operation'] = operation;
            }

            if (transactionSatus !== undefined) {
                localVarQueryParameter['TransactionSatus'] = transactionSatus;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['StartTime'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['EndTime'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (start !== undefined) {
                localVarQueryParameter['Start'] = start;
            }

            if (ends !== undefined) {
                localVarQueryParameter['Ends'] = ends;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseControllersApi - functional programming interface
 * @export
 */
export const PurchaseControllersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [status] 
         * @param {string} [direction] 
         * @param {string} [operation] 
         * @param {string} [transactionSatus] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {string} [userId] 
         * @param {number} [start] 
         * @param {number} [ends] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPurchaseMeGet(status?: string, direction?: string, operation?: string, transactionSatus?: string, startTime?: Date, endTime?: Date, userId?: string, start?: number, ends?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PurchaseEntity>>>> {
            const localVarAxiosArgs = await PurchaseControllersApiAxiosParamCreator(configuration).apiPurchaseMeGet(status, direction, operation, transactionSatus, startTime, endTime, userId, start, ends, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} productId 
         * @param {CreatePurchaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPurchaseProductProductIdBuyPost(productId: string, body?: CreatePurchaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PurchaseEntity>>> {
            const localVarAxiosArgs = await PurchaseControllersApiAxiosParamCreator(configuration).apiPurchaseProductProductIdBuyPost(productId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {ConfirmPurchaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPurchasePurchaseIdConfirmPost(purchaseId: string, body?: ConfirmPurchaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PurchaseEntity>>> {
            const localVarAxiosArgs = await PurchaseControllersApiAxiosParamCreator(configuration).apiPurchasePurchaseIdConfirmPost(purchaseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {UpdatePurchaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPurchasePurchaseIdPatch(purchaseId: string, body?: UpdatePurchaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PurchaseEntity>>> {
            const localVarAxiosArgs = await PurchaseControllersApiAxiosParamCreator(configuration).apiPurchasePurchaseIdPatch(purchaseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} tempUserId 
         * @param {string} [status] 
         * @param {string} [direction] 
         * @param {string} [operation] 
         * @param {string} [transactionSatus] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {string} [userId] 
         * @param {number} [start] 
         * @param {number} [ends] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPurchaseUserTempUserIdGet(tempUserId: string, status?: string, direction?: string, operation?: string, transactionSatus?: string, startTime?: Date, endTime?: Date, userId?: string, start?: number, ends?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PurchaseEntity>>>> {
            const localVarAxiosArgs = await PurchaseControllersApiAxiosParamCreator(configuration).apiPurchaseUserTempUserIdGet(tempUserId, status, direction, operation, transactionSatus, startTime, endTime, userId, start, ends, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PurchaseControllersApi - factory interface
 * @export
 */
export const PurchaseControllersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [status] 
         * @param {string} [direction] 
         * @param {string} [operation] 
         * @param {string} [transactionSatus] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {string} [userId] 
         * @param {number} [start] 
         * @param {number} [ends] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPurchaseMeGet(status?: string, direction?: string, operation?: string, transactionSatus?: string, startTime?: Date, endTime?: Date, userId?: string, start?: number, ends?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PurchaseEntity>>> {
            return PurchaseControllersApiFp(configuration).apiPurchaseMeGet(status, direction, operation, transactionSatus, startTime, endTime, userId, start, ends, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productId 
         * @param {CreatePurchaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPurchaseProductProductIdBuyPost(productId: string, body?: CreatePurchaseDto, options?: AxiosRequestConfig): Promise<AxiosResponse<PurchaseEntity>> {
            return PurchaseControllersApiFp(configuration).apiPurchaseProductProductIdBuyPost(productId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {ConfirmPurchaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPurchasePurchaseIdConfirmPost(purchaseId: string, body?: ConfirmPurchaseDto, options?: AxiosRequestConfig): Promise<AxiosResponse<PurchaseEntity>> {
            return PurchaseControllersApiFp(configuration).apiPurchasePurchaseIdConfirmPost(purchaseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {UpdatePurchaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPurchasePurchaseIdPatch(purchaseId: string, body?: UpdatePurchaseDto, options?: AxiosRequestConfig): Promise<AxiosResponse<PurchaseEntity>> {
            return PurchaseControllersApiFp(configuration).apiPurchasePurchaseIdPatch(purchaseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tempUserId 
         * @param {string} [status] 
         * @param {string} [direction] 
         * @param {string} [operation] 
         * @param {string} [transactionSatus] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {string} [userId] 
         * @param {number} [start] 
         * @param {number} [ends] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPurchaseUserTempUserIdGet(tempUserId: string, status?: string, direction?: string, operation?: string, transactionSatus?: string, startTime?: Date, endTime?: Date, userId?: string, start?: number, ends?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PurchaseEntity>>> {
            return PurchaseControllersApiFp(configuration).apiPurchaseUserTempUserIdGet(tempUserId, status, direction, operation, transactionSatus, startTime, endTime, userId, start, ends, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PurchaseControllersApi - object-oriented interface
 * @export
 * @class PurchaseControllersApi
 * @extends {BaseAPI}
 */
export class PurchaseControllersApi extends BaseAPI {
    /**
     * 
     * @param {string} [status] 
     * @param {string} [direction] 
     * @param {string} [operation] 
     * @param {string} [transactionSatus] 
     * @param {Date} [startTime] 
     * @param {Date} [endTime] 
     * @param {string} [userId] 
     * @param {number} [start] 
     * @param {number} [ends] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseControllersApi
     */
    public async apiPurchaseMeGet(status?: string, direction?: string, operation?: string, transactionSatus?: string, startTime?: Date, endTime?: Date, userId?: string, start?: number, ends?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PurchaseEntity>>> {
        return PurchaseControllersApiFp(this.configuration).apiPurchaseMeGet(status, direction, operation, transactionSatus, startTime, endTime, userId, start, ends, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} productId 
     * @param {CreatePurchaseDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseControllersApi
     */
    public async apiPurchaseProductProductIdBuyPost(productId: string, body?: CreatePurchaseDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<PurchaseEntity>> {
        return PurchaseControllersApiFp(this.configuration).apiPurchaseProductProductIdBuyPost(productId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} purchaseId 
     * @param {ConfirmPurchaseDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseControllersApi
     */
    public async apiPurchasePurchaseIdConfirmPost(purchaseId: string, body?: ConfirmPurchaseDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<PurchaseEntity>> {
        return PurchaseControllersApiFp(this.configuration).apiPurchasePurchaseIdConfirmPost(purchaseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} purchaseId 
     * @param {UpdatePurchaseDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseControllersApi
     */
    public async apiPurchasePurchaseIdPatch(purchaseId: string, body?: UpdatePurchaseDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<PurchaseEntity>> {
        return PurchaseControllersApiFp(this.configuration).apiPurchasePurchaseIdPatch(purchaseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} tempUserId 
     * @param {string} [status] 
     * @param {string} [direction] 
     * @param {string} [operation] 
     * @param {string} [transactionSatus] 
     * @param {Date} [startTime] 
     * @param {Date} [endTime] 
     * @param {string} [userId] 
     * @param {number} [start] 
     * @param {number} [ends] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseControllersApi
     */
    public async apiPurchaseUserTempUserIdGet(tempUserId: string, status?: string, direction?: string, operation?: string, transactionSatus?: string, startTime?: Date, endTime?: Date, userId?: string, start?: number, ends?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PurchaseEntity>>> {
        return PurchaseControllersApiFp(this.configuration).apiPurchaseUserTempUserIdGet(tempUserId, status, direction, operation, transactionSatus, startTime, endTime, userId, start, ends, options).then((request) => request(this.axios, this.basePath));
    }
}
