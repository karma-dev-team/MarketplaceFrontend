/* tslint:disable */
/* eslint-disable */
/**
 * KarmaMarketplace
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GatewayResultDto } from '../models';
import { HandleTransactionDto } from '../models';
import { TransactionEntity } from '../models';
import { TransactionProviderEntity } from '../models';
import { UpdateTransactionDto } from '../models';
/**
 * TransactionControllersApi - axios parameter creator
 * @export
 */
export const TransactionControllersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GatewayResultDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionPayoutPaypalychPost: async (body?: GatewayResultDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/transaction/payout/paypalych`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionProvidersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/transaction/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {UpdateTransactionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionTxIdCompletePost: async (txId: string, body?: UpdateTransactionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId','Required parameter txId was null or undefined when calling apiTransactionTxIdCompletePost.');
            }
            const localVarPath = `/api/transaction/{txId}/complete`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {HandleTransactionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionTxIdPost: async (txId: string, body?: HandleTransactionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId','Required parameter txId was null or undefined when calling apiTransactionTxIdPost.');
            }
            const localVarPath = `/api/transaction/{txId}`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {Date} [fromDate] 
         * @param {Date} [toDate] 
         * @param {string} [operation] 
         * @param {string} [transactionProvider] 
         * @param {number} [start] 
         * @param {number} [ends] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionUserUserIdGet: async (userId: string, fromDate?: Date, toDate?: Date, operation?: string, transactionProvider?: string, start?: number, ends?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiTransactionUserUserIdGet.');
            }
            const localVarPath = `/api/transaction/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (fromDate !== undefined) {
                localVarQueryParameter['FromDate'] = (fromDate as any instanceof Date) ?
                    (fromDate as any).toISOString() :
                    fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['ToDate'] = (toDate as any instanceof Date) ?
                    (toDate as any).toISOString() :
                    toDate;
            }

            if (operation !== undefined) {
                localVarQueryParameter['Operation'] = operation;
            }

            if (transactionProvider !== undefined) {
                localVarQueryParameter['TransactionProvider'] = transactionProvider;
            }

            if (start !== undefined) {
                localVarQueryParameter['Start'] = start;
            }

            if (ends !== undefined) {
                localVarQueryParameter['Ends'] = ends;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionControllersApi - functional programming interface
 * @export
 */
export const TransactionControllersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GatewayResultDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionPayoutPaypalychPost(body?: GatewayResultDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await TransactionControllersApiAxiosParamCreator(configuration).apiTransactionPayoutPaypalychPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionProvidersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TransactionProviderEntity>>>> {
            const localVarAxiosArgs = await TransactionControllersApiAxiosParamCreator(configuration).apiTransactionProvidersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {UpdateTransactionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionTxIdCompletePost(txId: string, body?: UpdateTransactionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TransactionEntity>>> {
            const localVarAxiosArgs = await TransactionControllersApiAxiosParamCreator(configuration).apiTransactionTxIdCompletePost(txId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {HandleTransactionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionTxIdPost(txId: string, body?: HandleTransactionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TransactionEntity>>> {
            const localVarAxiosArgs = await TransactionControllersApiAxiosParamCreator(configuration).apiTransactionTxIdPost(txId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {Date} [fromDate] 
         * @param {Date} [toDate] 
         * @param {string} [operation] 
         * @param {string} [transactionProvider] 
         * @param {number} [start] 
         * @param {number} [ends] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionUserUserIdGet(userId: string, fromDate?: Date, toDate?: Date, operation?: string, transactionProvider?: string, start?: number, ends?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TransactionEntity>>>> {
            const localVarAxiosArgs = await TransactionControllersApiAxiosParamCreator(configuration).apiTransactionUserUserIdGet(userId, fromDate, toDate, operation, transactionProvider, start, ends, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TransactionControllersApi - factory interface
 * @export
 */
export const TransactionControllersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {GatewayResultDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionPayoutPaypalychPost(body?: GatewayResultDto, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return TransactionControllersApiFp(configuration).apiTransactionPayoutPaypalychPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionProvidersGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TransactionProviderEntity>>> {
            return TransactionControllersApiFp(configuration).apiTransactionProvidersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} txId 
         * @param {UpdateTransactionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionTxIdCompletePost(txId: string, body?: UpdateTransactionDto, options?: AxiosRequestConfig): Promise<AxiosResponse<TransactionEntity>> {
            return TransactionControllersApiFp(configuration).apiTransactionTxIdCompletePost(txId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} txId 
         * @param {HandleTransactionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionTxIdPost(txId: string, body?: HandleTransactionDto, options?: AxiosRequestConfig): Promise<AxiosResponse<TransactionEntity>> {
            return TransactionControllersApiFp(configuration).apiTransactionTxIdPost(txId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {Date} [fromDate] 
         * @param {Date} [toDate] 
         * @param {string} [operation] 
         * @param {string} [transactionProvider] 
         * @param {number} [start] 
         * @param {number} [ends] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionUserUserIdGet(userId: string, fromDate?: Date, toDate?: Date, operation?: string, transactionProvider?: string, start?: number, ends?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TransactionEntity>>> {
            return TransactionControllersApiFp(configuration).apiTransactionUserUserIdGet(userId, fromDate, toDate, operation, transactionProvider, start, ends, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionControllersApi - object-oriented interface
 * @export
 * @class TransactionControllersApi
 * @extends {BaseAPI}
 */
export class TransactionControllersApi extends BaseAPI {
    /**
     * 
     * @param {GatewayResultDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionControllersApi
     */
    public async apiTransactionPayoutPaypalychPost(body?: GatewayResultDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return TransactionControllersApiFp(this.configuration).apiTransactionPayoutPaypalychPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionControllersApi
     */
    public async apiTransactionProvidersGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TransactionProviderEntity>>> {
        return TransactionControllersApiFp(this.configuration).apiTransactionProvidersGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} txId 
     * @param {UpdateTransactionDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionControllersApi
     */
    public async apiTransactionTxIdCompletePost(txId: string, body?: UpdateTransactionDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<TransactionEntity>> {
        return TransactionControllersApiFp(this.configuration).apiTransactionTxIdCompletePost(txId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} txId 
     * @param {HandleTransactionDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionControllersApi
     */
    public async apiTransactionTxIdPost(txId: string, body?: HandleTransactionDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<TransactionEntity>> {
        return TransactionControllersApiFp(this.configuration).apiTransactionTxIdPost(txId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {Date} [fromDate] 
     * @param {Date} [toDate] 
     * @param {string} [operation] 
     * @param {string} [transactionProvider] 
     * @param {number} [start] 
     * @param {number} [ends] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionControllersApi
     */
    public async apiTransactionUserUserIdGet(userId: string, fromDate?: Date, toDate?: Date, operation?: string, transactionProvider?: string, start?: number, ends?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TransactionEntity>>> {
        return TransactionControllersApiFp(this.configuration).apiTransactionUserUserIdGet(userId, fromDate, toDate, operation, transactionProvider, start, ends, options).then((request) => request(this.axios, this.basePath));
    }
}
